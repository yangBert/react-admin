{"version":3,"sources":["pages/question/config.js","pages/question/css/add.module.css","pages/question/components/Add.js","pages/common/layer/spinning/index.js","static/js/pagination.js","pages/question/store/creators.js"],"names":["type","product","application","user","other","module","exports","Option","Add","state","title","id","editorState","handleEditorChange","setState","this","props","location","record","content","BraftEditor","createEditorState","$$","trim","createdBy","localStorage","get","req","data","toHTML","save","error","arr","Object","keys","config","forEach","k","push","v","className","styles","pageContet","tip","spinning","form","formLine","inline","placeholder","allowClear","onChange","e","target","value","style","width","mapArr","map","item","key","button","onClick","history","goBack","editContent","Component","connect","question","editTitle","editType","editState","dispatch","action","creators","changeEditTitle","setEditType","queryDetail","CHANGE_SPINNING","createPagination","current","pageNo","pageSize","total","totalSize","defaultPageSize","showSizeChanger","showQuickJumper","createSaveAction","spinningAction","url","requestURL","request","res","success","message","okText","onOk","notification","queryListAction","list","results","pagination","types","queryDetailAction","changeEditorContentAction","publishNoticeAction","getState","notice","params","createChangeParamsAction","changeEditTitleAction","setEditTypeAction"],"mappings":"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","file":"static/js/99.5a112376.chunk.js","sourcesContent":["const type = {\n  product:\"产品\",\n  application:\"应用\",\n  user:\"用户\",\n  other:\"其它\",\n}\n\nexport {\n  type,\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formLine\":\"add_formLine__vzOL6\",\"inline\":\"add_inline__1NdN7\",\"form\":\"add_form__2oCmW\",\"pageContet\":\"add_pageContet__234JL\",\"editContent\":\"add_editContent__2Q5DL\",\"button\":\"add_button__6MnTy\"};","import React, { Component } from 'react';\nimport { Spin, Input, Button, message, Select } from 'antd';\nimport { connect } from 'react-redux';\nimport * as creators from '../store/creators';\nimport styles from '../css/add.module.css';\nimport BraftEditor from \"braft-editor\";\nimport \"braft-editor/dist/index.css\";\nimport $$ from 'static/js/base';\nimport * as config from '../config';\n\nconst { Option } = Select;\n\nclass Add extends Component {\n  state = {\n    title: \"\",\n    type: \"\",\n    id: \"\",\n    editorState: null\n  }\n  componentDidMount() {\n    if (this.props.location.state && this.props.location.state.record) {\n      const { title, type, id, content } = this.props.location.state.record;\n      this.setState({\n        title,\n        type,\n        id,\n        editorState: BraftEditor.createEditorState(content)\n      })\n    } else {\n      this.setState({\n        editorState: BraftEditor.createEditorState('<p>请描述常见问题...</p>')\n      })\n    }\n  }\n\n  save() {\n    const { editorState, title, id, type } = this.state;\n    if ($$.trim(title) === \"\") {\n      message.error('请填写公告标题');\n      return\n    } else if (editorState === null) {\n      message.error('请填公告内容');\n      return\n    }\n    const createdBy = $$.localStorage.get(\"adminId\")\n    let req = {\n      props: this.props,\n      data: {\n        title,\n        content: editorState.toHTML(),\n        createdBy,\n        type,\n      }\n    }\n\n    if (id) {\n      req.data.id = id;\n    }\n    this.props.save(req)\n  }\n\n  mapArr() {\n    let arr = [];\n    Object.keys(config.type).forEach(k => {\n      arr.push({ k, v: config.type[k] })\n    })\n    return arr;\n  }\n\n  handleEditorChange = (editorState) => {\n    this.setState({ editorState })\n  }\n\n  render() {\n    const { editorState } = this.state;\n    return (\n      <div className={`${styles.pageContet} pageContentColor`}>\n        <Spin tip=\"Loading...\" spinning={this.props.spinning}>\n          <div className=\"clearfix\">\n            <div className={`${styles.form} pullLeft`}>\n              <div className={`${styles.formLine} pullLeft`}>\n                <label className=\"pullLeft\">常见问题:</label>\n                <div className={`${styles.inline} pullLeft`}>\n                  <Input\n                    placeholder=\"常见问题\"\n                    allowClear\n                    onChange={e => this.setState({ title: e.target.value })}\n                    value={this.state.title}\n                  />\n                </div>\n              </div>\n              <div className={`${styles.formLine} pullLeft`}>\n                <label className=\"pullLeft\">类型:</label>\n                <div className={`${styles.inline} pullLeft`}>\n                  <Select\n                    value={this.state.type}\n                    style={{ width: \"100%\" }}\n                    onChange={value => this.setState({ type: value })}\n                  >\n                    <Option value=\"\">请选择</Option>\n                    {\n                      this.mapArr().map(item => {\n                        return <Option value={item.k} key={item.k}>{item.v}</Option>\n                      })\n                    }\n                  </Select>\n                </div>\n              </div>\n            </div>\n            <div className=\"pullRight\">\n              <Button type=\"primary\" className={`${styles.button}`}\n                onClick={() => this.save()}\n              >保存</Button>\n              <Button className={`${styles.button}`}\n                onClick={() => this.props.history.goBack()}\n              >返回</Button>\n            </div>\n\n          </div>\n          <div className={`${styles.editContent} my-component`}>\n            <BraftEditor\n              value={editorState}\n              onChange={this.handleEditorChange}\n            />\n          </div>\n        </Spin>\n      </div >\n    )\n  }\n}\n\nconst mapState = state => ({\n  spinning: state.question.spinning,\n  editTitle: state.question.editTitle,\n  editType: state.question.editType,\n  editContent: state.question.editContent,\n  editState: state.question.editState,\n})\n\nconst mapDispatch = dispatch => ({\n  save: req => {\n    const action = creators.createSaveAction(req);\n    dispatch(action);\n  },\n  changeEditTitle: req => {\n    const action = creators.changeEditTitleAction(req);\n    dispatch(action);\n  },\n  setEditType: req => {\n    const action = creators.setEditTypeAction(req);\n    dispatch(action);\n  },\n  queryDetail: id => {\n    const action = creators.queryDetailAction(id);\n    dispatch(action);\n  }\n})\n\nexport default connect(mapState, mapDispatch)(Add);","import CHANGE_SPINNING from './spinningTypes'\n\nexport default spinning => ({\n  type: CHANGE_SPINNING,\n  spinning\n})\n","export default function createPagination(data) {\n  return {\n    current: data.pageNo,\n    pageSize: data.pageSize,\n    total: data.totalSize,\n    defaultPageSize: 10,\n    showSizeChanger: true,\n    showQuickJumper: true\n  }\n} ","import * as types from './actionTypes';\nimport * as requestURL from 'static/js/requestURL';\nimport * as request from 'static/js/request';\nimport spinningAction from 'pages/common/layer/spinning';\nimport notification from 'pages/common/layer/notification';\nimport createPagination from 'static/js/pagination';\nimport { Modal } from 'antd'\nimport BraftEditor from 'braft-editor';\nconst initNoticeListAction = (list, pagination) => ({\n  type: types.QUERY_NOTICE_LIST,\n  list,\n  pagination\n})\n\n//保存公告\nconst createSaveAction = req => {\n  return dispatch => {\n    dispatch(spinningAction(true))\n    const url = req.data.id ? requestURL.webManagerQuestionUpdate : requestURL.webManagerQuestionAdd\n    request.json(url, req.data, res => {\n      dispatch(spinningAction(false))\n      if (res.data) {\n        const { success, message } = res.data && res.data\n        if (success) {\n          Modal.success({\n            title: '系统提示',\n            content: message,\n            okText: '确认',\n            onOk: () => {\n              req.props.history.goBack()\n            }\n          });\n        } else {\n          notification('error', message)\n        }\n      } else {\n        req.props.history.push(\"/500\")\n      }\n    })\n  }\n}\n\n//查询公告列表\nconst queryListAction = req => {\n  return dispatch => {\n    dispatch(spinningAction(true))\n    request.json(requestURL.questionQueryQuestionByPage, req.data, res => {\n      dispatch(spinningAction(false))\n      if (res.data) {\n        const { success, message, data } = res.data && res.data\n        if (success) {\n          const action = initNoticeListAction(data.results, createPagination(data))\n          dispatch(action)\n        } else {\n          notification('error', message)\n        }\n      } else {\n        req.props.history.push(\"/500\")\n      }\n    })\n  }\n}\n\n\nconst queryDetailAction = req => {\n  return (dispatch) => {\n    dispatch(spinningAction(true))\n    request.json(requestURL.webManagerQuestionDetail, req.data, res => {\n      dispatch(spinningAction(false))\n      if (res.data) {\n        const { success, message, data } = res.data && res.data\n        if (success) {\n          dispatch(changeEditorContentAction(BraftEditor.createEditorState(data.content)))\n        } else {\n          notification('error', message)\n        }\n      } else {\n        req.props.history.push(\"/500\")\n      }\n    })\n  }\n}\n\n//发布公告\nconst publishNoticeAction = req => {\n  return (dispatch, getState) => {\n    dispatch(spinningAction(true))\n    request.json(requestURL.noticePublishNotice, req.data, res => {\n      dispatch(spinningAction(false))\n      if (res.data) {\n        const { success, message } = res.data && res.data\n        if (success) {\n          Modal.success({\n            title: '系统提示',\n            content: message,\n            okText: '确认',\n            onOk: () => {\n              const pagination = getState().notice.pagination\n              const params = {\n                ...getState().notice.params,\n                pageNo: pagination.current,\n                pageSize: pagination.pageSize,\n              }\n              dispatch(queryListAction({ props: req.props, data: params }));\n            }\n          });\n        } else {\n          notification('error', message)\n        }\n      } else {\n        req.props.history.push(\"/500\")\n      }\n    })\n  }\n}\n\n//查询携带参数\nconst createChangeParamsAction = params => ({\n  type: types.CHANGE_SEARCH_PARAMS,\n  params\n})\n\n//编辑改变标题\nconst changeEditTitleAction = editTitle => ({\n  type: types.CHANGE_EDIT_TITLE,\n  editTitle\n})\n\n//改变类型\nconst setEditTypeAction = editType => ({\n  type: types.CHANGE_EDIT_TYPE,\n  editType\n})\n\n\n//编辑改变富文本内容\nconst changeEditorContentAction = editContent => ({\n  type: types.CHANGE_EDIT_CONTENT,\n  editContent\n})\n\n\nexport {\n  queryListAction,\n  createSaveAction,\n  createChangeParamsAction,\n  changeEditTitleAction,\n  setEditTypeAction,\n  changeEditorContentAction,\n  publishNoticeAction,\n  queryDetailAction,\n}"],"sourceRoot":""}